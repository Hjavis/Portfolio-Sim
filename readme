utils
def plot_portfolio_return_volatility(returns, rolling_window=30):
    #skal bruge et fix
def plot_portfolio_returns(returns):
    #skal fixes fix

metrics
portfolio_returns(data, start_date=None, end_date=None):
    #fix
portfolio_return_float(data, start_date=None, end_date=None):
    #fix

randomwalk (skal laves ordenligt)

fremtidig cashflows skal discountes

#normalfordeling VaR, covariance var senere?

def first_portfolio_activity og set som default p√• mange utils og metrics

ABC Abstract, Property, Deque 


# Simple Portfolio Management and Backtesting System

A Python-based toolkit for simulating and analyzing trading strategies, managing portfolios, and evaluating performance against benchmarks.

## Features
- **Portfolio Management**: Track holdings, cash, transactions, and performance metrics (VaR, PnL).  
- **Backtesting Engine**: Test moving-average strategies against historical data.  
- **Cash Flow System**: Model dividends, derivatives, and interest payments with tax-aware calculations.  
- **Data Pipeline**: Fetch S&P 500 stock data via Yahoo Finance (YFinance) and store locally.  
- **Visualization**: Plot portfolio allocations, sector distributions, and strategy performance.  

## Key Technologies  
- **Python** (Pandas, NumPy, Matplotlib)  
- **OOP Design** (Abstract Classes, Type Hints)  
- **Financial Metrics** (VaR, Rolling Volatility, Cumulative Returns)  
- **YFinance API** for market data  

## Example Use Case  
```python
from portfolio import Portfolio  
from backtest import BackTester  

# Initialize portfolio and backtest a moving-average strategy  
pf = Portfolio(name="Demo", data=data, starting_cash=100000)  
pf.buy_asset("AAPL", 10, at_date="2020-01-01")  
backtester = BackTester(pf)  
backtester.moving_average_strategy_full("AAPL", window=30)  


